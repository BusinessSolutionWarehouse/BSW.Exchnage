using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PurchaseOrder.Data;
using System.Xml.Linq;
using BSW_ExchangeShared;

namespace PurchaseOrderImport
{
    public class PurchaseOrderValidation:IDisposable
    {

        #region IDisposable/Construction Members

        private bool _disposed = false;

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {

                }
            }
            _disposed = true;
        }

        public PurchaseOrderValidation()
        {

        }

        #endregion

        /// <summary>
        /// Validate the Importer - SenderID
        /// </summary>
        /// <param name="xdoc">Current xml document</param>
        /// <param name="importerID">Resolved importer id</param>
        /// <param name="valErrors">List of errors</param>
        /// <returns></returns>
        public bool ValidateImporter(XDocument xdoc, ref Int32 importerID,ref Int32 importerRoleID, List<ValidationError> valErrors)
        {
            bool result = true;
            try
            {
                var messageHeader = from d in xdoc.Elements("Message").Elements("MessageHeader") select d;
                string importerCode = messageHeader.FirstOrDefault().Element("SenderID").Value;
                if (string.IsNullOrEmpty(importerCode))
                {
                    valErrors.Add(new ValidationError { Message = "SenderID was not found or was missing a value" });
                    return false;
                }
                string msg = string.Empty;
                //lets see if we can get the business entity id
                using (BusinessEntityController controller = new BusinessEntityController())
                {
                    result = controller.GetImporter(new BusinessEntityModel { BusinessEntityCode = importerCode }, ref msg);
                    if (result)
                    {
                        if (controller.Count > 0)
                        {
                            importerID = Convert.ToInt32(controller[0].BusinessEntityID);
                            importerRoleID = Convert.ToInt32(controller[0].BusinessEntityRoleLinkID);
                        }
                        else
                        {
                            result = false;
                            valErrors.Add(new ValidationError { Message = "Importer was not Found - SenderID(" + importerCode + ")" });
                        }
                    }
                    else
                        valErrors.Add(new ValidationError { Message = "Error loading SenderID(" + importerCode + ") - " + msg });
                }
            }
            catch (Exception exp)
            {
                result = false;
                result = false;
                valErrors.Add(new ValidationError { Message = exp.Message });
            }
            return result;

        }

        /// <summary>
        /// validate the supplier code - and load all the needed supplier detail
        /// </summary>
        /// <param name="xdoc">Current xml Document</param>
        /// <param name="supplierInfo">Supplier Detail </param>
        /// <param name="valErrors">List of validation errors</param>
        /// <returns></returns>
        public bool ValidateSupplier(XDocument xdoc, ref SupplierModel supplierInfo, List<ValidationError> valErrors)
        {
            bool result = true;
            try
            {
                var supplier = from d in xdoc.Elements("Message").Elements("MessageBody").Elements("Order").Elements("Supplier") select d;
                
                string supplierCode = supplier.FirstOrDefault().Element("SupplierCode").Value;
                if (string.IsNullOrEmpty(supplierCode))
                {
                    valErrors.Add(new ValidationError { Message = "Supplier Code was not found or was missing a value" });
                    return false;
                }
                string msg = string.Empty;
                //lets see if we can get the business entity id
                using (SupplierController controller = new SupplierController())
                {
                    result = controller.GetDetail(new SupplierModel { SupplierCode = supplierCode }, ref msg);
                    if (result)
                    {
                        if (controller.Count > 0)
                        {
                            //we need to set each value - because the controller will be disposed
                            supplierInfo = new SupplierModel
                            {
                                SupplierCode = controller[0].SupplierCode,
                                SupplierName = controller[0].SupplierName,
                                SupplierID = controller[0].SupplierID,
                                CountryOfOriginID = controller[0].CountryOfOriginID,
                                DefaultCurrencyID = controller[0].DefaultCurrencyID,
                                DefaultPortCode = controller[0].DefaultPortCode,
                                IncoTermCode = controller[0].IncoTermCode,
                                PaymentTermID = controller[0].PaymentTermID,
                                PaymentTriggerID = controller[0].PaymentTriggerID,
                                TransportModeID = controller[0].TransportModeID,
                                SupplierRoleLinkID = controller[0].SupplierRoleLinkID
                            };
                        }
                        else
                        {
                            result = false;
                            valErrors.Add(new ValidationError { Message = "Supplier was not Found - SupplierCode(" + supplierCode + ")" });
                        }
                    }
                    else
                        valErrors.Add(new ValidationError { Message = "Error loading Supplier(" + supplierCode + ") - " + msg });
                }
            }
            catch (Exception exp)
            {
                result = false;
                result = false;
                valErrors.Add(new ValidationError { Message = exp.Message });
            }
            return result;
        }

        /// <summary>
        /// Extract all the order detials in the Order tag
        /// </summary>
        /// <param name="xdoc">Active XML document</param>
        /// <param name="orderModel">Purchage Order Model</param>
        /// <param name="valErrors">List possible errors</param>
        /// <returns></returns>
        public bool ExtractOrderDetail(XDocument xdoc, ref PurchaseOrderModel orderModel, List<ValidationError> valErrors)
        {
            bool result = true;
            try
            {
                var orders = from d in xdoc.Elements("Message").Elements("MessageBody").Elements("Order") select d;

                foreach (var order in orders)
                {
                    XElement orderNo = order.Element("OrderNo");
                    if (orderNo != null && !string.IsNullOrEmpty(orderNo.Value))
                    {
                        orderModel.OrderNo = orderNo.Value;
                    }
                    else
                    {
                        result = false;
                        valErrors.Add(new ValidationError { Message = "The OrderNo value is missing"});
                    }
                    //Imprter ref is not Requiered - so if we do have it - no worries
                    XElement impRef = order.Element("ImporterRef");
                    if (impRef != null && !String.IsNullOrEmpty(impRef.Value))
                        orderModel.ImporterRef = impRef.Value;

                    break; //we should only ever get 1 order in a message
                }
               
            }
            catch (Exception exp)
            {
                result = false;
                result = false;
                valErrors.Add(new ValidationError { Message = exp.Message });
            }
            return result;
        }

        /// <summary>
        /// Extract all the linked order lines and product information
        /// </summary>
        /// <param name="xdoc">XML Document</param>
        /// <param name="orderLines">List of linked order line details</param>
        /// <param name="valErrors">List of possable errors</param>
        /// <returns></returns>
        public bool ExtractOrderLines(XDocument xdoc, ref List<OrderLineModel> orderLineModels,int importerID,SupplierModel supplierDetail, List<ValidationError> valErrors)
        {
            bool result = true;
            try
            {
                var orders = from d in xdoc.Elements("Message").Elements("MessageBody").Elements("Order") select d;
                bool hasTargetDate = false;
                DateTime targetDt = DateTime.Now;
                //we need to get the TagetDelivery Date - on the Order Tag
                foreach (var order in orders)
                {
                    XElement targetDate = order.Element("TargetDeliveryDate");
                    if (targetDate != null && !string.IsNullOrEmpty(targetDate.Value))
                    {
                        try
                        {
                            DateTime.TryParse(targetDate.Value, out targetDt);
                            hasTargetDate = true;
                        }
                        catch
                        {
                            //taget date is not requierd - so not to worry if we get an error
                        }
                    }
                    break; //we should only ever get 1 order in a message
                }
                var orderLines = from d in orders.Elements("OrderLine") select d;
                
                int iLineCount = 1;
                
                foreach (var orderline in orderLines)
                {
                    OrderLineModel newLine = new OrderLineModel();
                    bool haserror = false;
                    try
                    {
                        ProductModel productModel = new ProductModel();
                        if (hasTargetDate)
                            newLine.OnSiteDt = targetDt;

                        productModel.ImporterID = importerID;
                        productModel.SupplierID = supplierDetail.SupplierRoleLinkID;

                        if (supplierDetail.DefaultCurrencyID.HasValue)
                            newLine.UnitCurrencyID = Convert.ToInt16(supplierDetail.DefaultCurrencyID);
                         
                        productModel.ProductDescription = orderline.Element("Description").Value.Trim();
                        newLine.Description = productModel.ProductDescription;
                        if (string.IsNullOrEmpty(productModel.ProductDescription))
                        {
                            valErrors.Add(new ValidationError { Message = "OrderLine " + iLineCount + " - Missing Description" });
                            haserror = true;
                        }
                        if (string.IsNullOrEmpty(orderline.Element("ItemCode").Value))
                        {
                            valErrors.Add(new ValidationError { Message = "OrderLine " + iLineCount + " - Missing ItemCode" });
                            haserror = true;
                        }
                        else
                            productModel.ProductCode = orderline.Element("ItemCode").Value;

                        if (string.IsNullOrEmpty(orderline.Element("Qty").Value))
                        {
                            valErrors.Add(new ValidationError { Message = "OrderLine " + iLineCount + " - Missing Qty" });
                            haserror = true;
                        }
                        else
                            newLine.UnitQuantity = Int32.Parse(orderline.Element("Qty").Value);

                        newLine.UnitTypeID = LookupUnitType(orderline.Element("UnitType").Value);

                        if (!string.IsNullOrEmpty(orderline.Element("UnitPrice").Value))
                        {
                            productModel.UnitPriceForeign = decimal.Parse(orderline.Element("UnitPrice").Value);
                            newLine.UnitPrice = productModel.UnitPriceForeign;
                        }
                        if (!string.IsNullOrEmpty(orderline.Element("UnitsPerPackage").Value))
                            productModel.UnitPackQty = short.Parse(orderline.Element("UnitsPerPackage").Value);
                        else
                            productModel.UnitPackQty = 1;

                        if (!string.IsNullOrEmpty(orderline.Element("SupplierRef").Value))
                            newLine.SupplierRefNo = orderline.Element("SupplierRef").Value;

                        //validate the product info
                        if (ValidateProduct(ref productModel, valErrors))
                        {
                            newLine.ProductID = productModel.ProductID;
                            newLine.TariffCode = productModel.TariffCode;

                            if (productModel.UnitDim1_CM.HasValue && productModel.UnitDim2_CM.HasValue && productModel.UnitDim3_CM.HasValue)
                                newLine.TotalVolume =  newLine.UnitQuantity * (productModel.UnitDim1_CM * productModel.UnitDim2_CM * productModel.UnitDim3_CM);
                            else
                                newLine.TotalVolume = 0;
                            
                            if (productModel.UnitWeight_KG.HasValue)
                                newLine.TotalWeight = newLine.UnitQuantity * productModel.UnitWeight_KG;

                            newLine.CreatedDt = DateTime.Now;
                            newLine.CreatedUserID = 3;//system
                            newLine.OrderLineStatusID = (byte)OrderLineStatus.Pending;

                            orderLineModels.Add(newLine);
                        }
                        else
                        {
                            result = false;
                            haserror = true;
                        }

                    }
                    catch (Exception exp)
                    {
                        result = false;
                        valErrors.Add(new ValidationError { Message = "Order Line Error: " + exp.Message });
                    }
                    iLineCount++;
                }

            }
            catch (Exception exp)
            {
                result = false;
                valErrors.Add(new ValidationError { Message = exp.Message });
            }
            return result;
        }

        /// <summary>
        /// Validate the product information
        /// </summary>
        /// <param name="productModel">Product Detail</param>
        /// <param name="azProduct">AutoZone product detail</param>
        /// <param name="valErrors">List of errors</param>
        /// <returns></returns>
        private bool ValidateProduct(ref ProductModel productModel,List<ValidationError> valErrors)
        {
            bool result = true;
            try
            {
                string msg = string.Empty;
                using (ProductController controller = new ProductController())
                {
                    if (controller.GetByCode(productModel.ProductCode,ref msg))
                    {
                        //update the values - and update the unit price in the database
                        if (controller.Count > 0)
                        {
                            productModel.ProductID = controller[0].ProductID;
                            productModel.UnitWeight_KG = controller[0].UnitWeight_KG;
                            productModel.TariffCode = controller[0].TariffCode;
                            //update the unit price
                            controller.UpdateUnitPriceOnly(Convert.ToDecimal(productModel.UnitPriceForeign), Convert.ToInt32(productModel.ProductID), 3, ref msg);
                        }
                        else
                        {
                            ////insert the values we do have
                            //productModel.ProductStatusID = (byte)ProductStatus.NewIncomplete;
                            //if (!controller.Insert(productModel,3, ref msg))
                            //{
                            //    result = false;
                            //    valErrors.Add(new ValidationError { Message = "Product ( " + productModel.ProductCode + ") - " + msg });
                            //}
                            //we no longer add the new product
                            result = false;
                            valErrors.Add(new ValidationError{Message = "Product not found-Code: " + productModel.ProductCode + " Desc: " + productModel.ProductDescription});
                        }
                    }
                    else
                    {
                        result = false;
                        valErrors.Add(new ValidationError { Message = "Product ( " + productModel.ProductCode + ") - " + msg });
                    }
                }
            }
            catch (Exception exp)
            {
                result = false;
                valErrors.Add(new ValidationError { Message = "Product ( " + productModel.ProductCode + ") - " + exp.Message });
            }

            return result;
        }

        /// <summary>
        /// Look up the corresonding unit type id
        /// </summary>
        /// <param name="unitType">Uit type description</param>
        /// <returns>Unit type id</returns>
        private byte? LookupUnitType(string unitType)
        {
            byte? result = null;
            try
            {
                string msg = string.Empty;
                using (UnitTypeController controller = new UnitTypeController())
                {
                    if (controller.Get(new UnitTypeModel { Name = unitType }, ref msg))
                    {
                        if (controller.Count > 0)
                            result = Convert.ToByte(controller[0].UnitTypeID);
                        else
                        {
                            //unit type is not found - lets add it
                            using (UnitTypeModel model = new UnitTypeModel())
                            {
                                model.Name = unitType;
                                model.IsActive = true;
                                model.IsDefault = false;
                                if (controller.Insert(model, ref msg))
                                    result = Convert.ToByte(model.UnitTypeID);
                            }
                        }
                    }
                }
            }
            catch
            {
                //unit type is not requierd - no need to worrie about errors
                result = null;
            }

            return result;

        }
    }
}
